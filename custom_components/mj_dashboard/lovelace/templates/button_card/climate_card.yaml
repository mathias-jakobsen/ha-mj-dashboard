mj_climate_card:
  template: mj_entity_card

  variables:
    mj_color: "[[[ return `var(--mj-color-climate-hvac-mode-${entity.state}, var(--mj-color-climate, var(--primary-color)))`; ]]]"

  state_display: >
      [[[
        const temperature = `${entity.attributes.current_temperature} ${hass.config.unit_system.temperature}`;
        const hvac_action = entity.state == "off" ? "off" : entity.attributes.hvac_action;
        return hvac_action != undefined ? `${temperature} â€¢ ${hvac_action}` : `${temperature}`;
      ]]]

  custom_fields:
    extra_row:
      card:
        type: custom:layout-card
        layout_type: grid
        layout:
          grid-gap: var(--mj-card-grid-gap)
          grid-template: >
            "temp_down target_temp temp_up"
            "hvac_modes hvac_modes hvac_modes" / 1fr 1fr 1fr
          margin: 0
          padding: 0
        cards:
          - view_layout:
              grid_area: temp_down
            type: custom:button-card
            template: mj_card_action_card
            icon: mdi:minus
            tap_action:
              action: call-service
              service: climate.set_temperature
              service_data:
                entity_id: "[[[ return entity.entity_id; ]]]"
                temperature: "[[[ return parseFloat(entity.attributes.temperature) - (entity.attributes.target_temp_step ?? 0.5); ]]]"

          - view_layout:
              grid_area: target_temp
            type: custom:button-card
            template: mj_card_text_card
            label: "[[[ return `${entity.attributes.temperature} ${hass.config.unit_system.temperature}`; ]]]"

          - view_layout:
              grid_area: temp_up
            type: custom:button-card
            template: mj_card_action_card
            icon: mdi:plus
            tap_action:
              action: call-service
              service: climate.set_temperature
              service_data:
                entity_id: "[[[ return entity.entity_id; ]]]"
                temperature: "[[[ return parseFloat(entity.attributes.temperature) + (entity.attributes.target_temp_step ?? 0.5); ]]]"

          - view_layout:
              grid-area: hvac_modes
            type: custom:layout-card
            layout_type: grid
            layout:
              grid-gap: var(--mj-card-grid-gap)
              grid-template-columns: "[[[ return `repeat(${entity.attributes.hvac_modes.length}, 1fr)`; ]]]"
              margin: 0
            cards: >
              [[[
                const result = [];
                const hvac_mode_icons = {
                  auto: "mdi:calendar-sync",
                  heat_cool: "mdi:sun-snowflake",
                  heat: "mdi:fire",
                  cool: "mdi:snowflake",
                  off: "mdi:power"
                }

                for (const hvac_mode of Object.keys(hvac_mode_icons)) {
                  if (entity.attributes.hvac_modes.includes(hvac_mode) == false) {
                    continue;
                  }

                  let button = {
                    type: "custom:button-card",
                    template: "mj_card_action_card",
                    icon: hvac_mode_icons[hvac_mode],
                    tap_action: {
                      action: "call-service",
                      service: "climate.set_hvac_mode",
                      service_data: {
                        entity_id: entity.entity_id,
                        hvac_mode: hvac_mode
                      }
                    }
                  }

                  if (entity.state == hvac_mode) {
                    button.variables = { mj_color: variables.mj_color, mj_color_icon: true, mj_color_opacity: 0.3 };
                  }

                  result.push(button);
                }

                return result;
              ]]]

  state:
    - id: state_on
      operator: template
      value: >
        [[[
          if (["none", "transparent", "undefined"].includes(variables.mj_color)) {
            return false;
          }

          if (entity.state == "off") {
            return false;
          }

          return variables.mj_color_always || [undefined, "heating", "cooling"].includes(entity.attributes.hvac_action);
        ]]]